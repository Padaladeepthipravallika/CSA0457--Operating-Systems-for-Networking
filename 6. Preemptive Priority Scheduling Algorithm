#include <stdio.h>

typedef struct {
    int process_id;
    int burst_time;
    int remaining_time;
    int priority;
    int waiting_time;
    int turnaround_time;
    int arrival_time;
} Process;

void preemptive_priority(Process processes[], int n) {
    int completed = 0, current_time = 0, min_priority, process_id;
    while (completed < n) {
        min_priority = 9999; 
        process_id = -1;

        // Select the process with the highest priority
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && 
                processes[i].remaining_time > 0 && 
                processes[i].priority < min_priority) {
                min_priority = processes[i].priority;
                process_id = i;
            }
        }

        if (process_id == -1) {
            current_time++; 
            continue; 
        }

        processes[process_id].remaining_time--;
        current_time++;

        if (processes[process_id].remaining_time == 0) {
            completed++;
            processes[process_id].turnaround_time = current_time - processes[process_id].arrival_time;
            processes[process_id].waiting_time = processes[process_id].turnaround_time - processes[process_id].burst_time;
        }
    }
}

void print_process_details(Process processes[], int n) {
    printf("\nProcess\tArrival\tBurst\tPriority\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n", 
               processes[i].process_id, 
               processes[i].arrival_time, 
               processes[i].burst_time, 
               processes[i].priority, 
               processes[i].waiting_time, 
               processes[i].turnaround_time);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter arrival time, burst time, and priority for process P%d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }

    preemptive_priority(processes, n);
    print_process_details(processes, n);

    return 0;
}
