#include <stdio.h>

struct Process {
    int pid;        // Process ID
    int burst_time; // Burst time
    int waiting_time;
    int turnaround_time;
};
void calculateTimes(struct Process processes[], int n) {
    int completed = 0, current_time = 0, min_index;
    int visited[n];
    for (int i = 0; i < n; i++) {
        visited[i] = 0;
    }
    while (completed < n) {
        min_index = -1;
        for (int i = 0; i < n; i++) {
            if (!visited[i] && (min_index == -1 || processes[i].burst_time < processes[min_index].burst_time)) {
                min_index = i;
            }
        }
        visited[min_index] = 1;
        completed++;
        processes[min_index].waiting_time = current_time;
        processes[min_index].turnaround_time = current_time + processes[min_index].burst_time;
        current_time += processes[min_index].burst_time;
    }
}

void displayResults(struct Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time);

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f", total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
}

int main() {
    int n;

