#include <stdio.h>

typedef struct {
    int process_id;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
} Process;

void sjf_non_preemptive(Process processes[], int n) {
    int completed = 0, current_time = 0, min_burst, process_id;

    while (completed < n) {
        min_burst = 9999; 
        process_id = -1;

        // Select the process with the shortest burst time
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].burst_time < min_burst && processes[i].turnaround_time == -1) {
                min_burst = processes[i].burst_time;
                process_id = i;
            }
        }

        if (process_id == -1) {
            current_time++;
            continue;
        }

        current_time += processes[process_id].burst_time;
        processes[process_id].waiting_time = current_time - processes[process_id].arrival_time - processes[process_id].burst_time;
        processes[process_id].turnaround_time = processes[process_id].waiting_time + processes[process_id].burst_time;
        completed++;
    }
}

void print_process_details(Process processes[], int n) {
    printf("\nProcess\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\n", 
               processes[i].process_id, 
               processes[i].arrival_time, 
               processes[i].burst_time, 
               processes[i].waiting_time, 
               processes[i].turnaround_time);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter arrival time and burst time for process P%d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].turnaround_time = -1;
    }

    sjf_non_preemptive(processes, n);
    print_process_details(processes, n);

    return 0;
}
