#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h> // Include for wait()

int main() {
    key_t key = ftok("shmfile", 65); // Generate a unique key
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT); // Create shared memory
    char *str = (char *)shmat(shmid, (void *)0, 0); // Attach to shared memory

    if (fork() == 0) { // Child process
        printf("Child writing to shared memory...\n");
        strcpy(str, "Hello from child process!");
        shmdt(str); // Detach shared memory
    } else { // Parent process
        wait(NULL); // Wait for child to finish
        printf("Parent reading from shared memory: %s\n", str);
        shmdt(str); // Detach shared memory
        shmctl(shmid, IPC_RMID, NULL); // Destroy shared memory
    }
    return 0;
}
