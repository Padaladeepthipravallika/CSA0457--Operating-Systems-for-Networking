#include <stdio.h>

struct Process {
    int pid;        
    int burst_time; 
    int waiting_time;
    int turnaround_time;
};

void calculateTimes(struct Process processes[], int n) {
    int completion_time = 0; 

    for (int i = 0; i < n; i++) {
       
        completion_time += processes[i].burst_time;
        processes[i].turnaround_time = completion_time;

        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
    }
}

void displayResults(struct Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time);

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f", total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("P%d: ", processes[i].pid);
        scanf("%d", &processes[i].burst_time);
    }
    calculateTimes(processes, n);

    // Display results
    displayResults(processes, n);

    return 0;
}
